#import "./errors.jsligo" "Errors"
#import "./token.jsligo" "Token"
#import "./amount.jsligo" "Amount"

type owner = address;

export type ledger_module<L> = {
  data : L;
  empty : L;
  increase : (p : [L, owner, Token.T, Amount.T]) => L;
  decrease : (p : [L, owner, Token.T, Amount.T]) => L;
  balance_of : (p: [L, owner, Token.T]) => Amount.T;
  supply: (p: [L, Token.T]) => option<Amount.T>;
};

//@inline
export const decrease_token_amount_for_user = <L>(
  ledger_module: ledger_module<L>,
  from_: owner,
  token_id: Token.T,
  amount_: nat
): ledger_module<L> => {
  const data = ledger_module.decrease([ledger_module.data, from_, token_id, amount_]);

  return { ...ledger_module, data };
};

//@inline
export const increase_token_amount_for_user = <L>(
  ledger_module: ledger_module<L>,
  to_: owner,
  token_id: Token.T,
  amount_: nat
): ledger_module<L> => {
  const data = ledger_module.increase([ledger_module.data, to_, token_id, amount_]);

  return { ...ledger_module, data };
};

//@inline
export const get_supply = <L>(
  ledger_module: ledger_module<L>,
  token_id: Token.T
): option<Amount.T> =>
  ledger_module.supply([ledger_module.data, token_id]);

//@inline
export const get_for_user = <L>(
  ledger_module: ledger_module<L>,
  owner: owner,
  token_id: Token.T
): Amount.T => {
  return ledger_module.balance_of([ledger_module.data, owner, token_id]);
};


/* Possible types as defined in the TZIP-12 */

export namespace Common_Asset {
  export const balance_of = (value: option<Amount.T>): Amount.T => {
    match(value) {
      when(Some(v)): do { return v };
      when(None()): do { return (0 as nat) };
    };
  };

  export const add_to_val = (amount_: Amount.T, old_value: option<Amount.T>): Amount.T => {
    const value = balance_of(old_value);

    return value + amount_;
  };

  export const sub_to_val = (amount_: Amount.T, old_value: option<Amount.T>): Amount.T => {
    const value = balance_of(old_value);
    Assert.Error.assert(value >= amount_, Errors.ins_balance);

    return abs(value - amount_);
  };
};

export namespace NFT {
  export type L = big_map<Token.T, address>;

  export const empty: L = Big_map.empty;

  export const _balance_of = (address: address, value: option<owner>): Amount.T => {
    return match(value) {
      when(Some(own)): do { return (own == address ? (1 as nat) : (0 as nat)) };
      when(None()): do { return (0 as nat) };
    };
  };

  export const add_to_val = (address: address, amount: Amount.T): option<owner> => {
    return amount == (1 as nat) ? Some(address) : failwith(Errors.amount_net_expected);
  };

  export const sub_to_val = (amount: Amount.T): option<owner> => {
    return amount == (1 as nat) ? (None() as option<owner>) : failwith(Errors.amount_net_expected);
  };

  export const get_for_user = (ledger: L, token_id: Token.T): option<owner> => {
    return Big_map.find_opt(token_id, ledger);
  };

  export const set_for_user = (ledger: L, owner: owner, token_id: Token.T): L => {
    return Big_map.update(token_id, Some(owner), ledger);
  };

  export const decrease = (
    [ledger, from_, token_id, amount_] : [L, owner, Token.T, Amount.T]
  ): L => {
    get_for_user(ledger, token_id);
    sub_to_val(amount_);

    return set_for_user(ledger, from_, token_id);
  };

  export const increase = (
    [ledger, to_, token_id, amount_] : [L, owner, Token.T, Amount.T]
  ): L => {
    get_for_user(ledger, token_id);
    add_to_val(to_, amount_);

    return set_for_user(ledger, to_, token_id);
  };

  export const balance_of = (
    [ledger, owner, token_id]: [L, owner, Token.T]
  ): Amount.T => {
    const b = _balance_of(owner, get_for_user(ledger, token_id));
    return (b as Amount.T);
  };

  export const supply = (
    [ledger, token_id]: [L, Token.T]
  ): option<Amount.T> => {
    return match(get_for_user(ledger, token_id)) {
      when(Some(_)): Some(1n);
      when(None()): None();
    };
  };

  export const ledger_module = (data: L): ledger_module<L> => {
    return {
      data,
      empty,
      increase,
      decrease,
      balance_of,
      supply,
    };
  };
}
